# Introduction

A key and signing policy (KASP) defines a DNSSEC [](#RFC4033) [](#RFC4034)
[](#RFC4035) policy for one or more zones. 

## Key Words

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY" and "OPTIONAL" in this document are to be
interpreted as described in [](#RFC2119).

## Terminology

The reader is assumed to be familiar with DNSSEC described
in [](#RFC4033) [](#RFC4034) [](#RFC4035), [](#RFC5155) and [](#RFC6781). 

The following terminology is used throughout this document:

KASP:

:   Key And Signing Policy, describes a DNSSEC policy that can be applied to
    one or more zones.


A key and signing policy can be expressed in any format. This document
uses XML as example.

## Data Modeling

### Data Modeling Types

This document reuses the modeling types described in [](#RFC6020).

The following modeling types are used:

container:

:   A container is used to group related nodes in a subtree. A container
    has only child nodes and no values. 

list:

:   A list defines a sequence of list entries.

leaf:

:   A leaf contains simple data like an integer or a string. It has exactly
    one value and no child nodes.

choice:

:   A choice contains a set of case nodes that cannot appear together.

case:

:   A case is part of the choice type and represents one possible candidate
    that may appear in the schema.

### Data Modeling Arguments

The following argumenst are used:

string:

:   A string.

duration:

:   A duration, as specified in ISO 8601 [REF].

empty:

:   An empty type.

integer:

:   An integer.


# KASP Contents

## Preamble

All policies MUST be enclosed in a KASP container. 

    container KASP {
        ...
    }

A KASP container MUST contain a sequence of policy entries and MUST NOT contain
any other modeling types.

### Policies

Each policy MUST have a "name" leaf which contains the name of the policy. The
name is used to link a policy and the zones signed using it; each policy MUST
have a unique name. A policy named "default" MAY be used to associate with all
zones that do not have a policy explicitly configured. A policy MUST have a
description associated with it. Furthermore, a policy MUST have the containers
Signatures, Denial, Keys, Zone and Parent. These containers are described
in the forthcoming sections.

    list Policy {
        key "name";
        leaf name { type string; }
        leaf description { type string; }
        container Signatures { ... }
        container Denial { ... }
        container Keys { ... }
        container Zone { ... }
        container Parent { ... }
    }


#### Signatures

A Signatures container defines the policy parameters for creating RRSIG
records and MUST be included. It MUST contain the following leaf nodes: Resign,
Refresh, Jitter, InceptionOffset. It MUST contain a Validity container that
includes leaf nodes for the validity periods of certain type of RRsets. The
Default leaf node sets the validity period for all RRsets that do not
have a specific leaf node in this Validity container. The Denial leaf node
sets the validity period for all NSEC and NSEC3 RRsets.

The Validity container MUST include leaf nodes Default and Denial and MAY
include other leaf nodes to differentiate between even more types of RRsets.

    container Signatures {
        leaf Resign { type duration; }
        leaf Refresh { type duration; }
        leaf Jitter { type duration; }
        leaf InceptionOffset { type duration; }
        container Validity {
            leaf Default { type duration; }
            leaf Denial { type duration; }
        }
    }

Here:

1. Resign - the re-sign interval, which is the interval when the signer MUST
   re-sign the zone.
1. Refresh - the refresh interval, detailing when a signature MUST be
   refreshed. As signatures are typically valid for much longer than the
   interval between runs of the signer, there is no need to re-generate the
   signatures each time the signer runs. The signature MUST be refreshed when
   the time until the signature expiration is closer than the refresh interval
   or when the data has been changed. A value of zero (PT0S) MUST be
   interpreted as to refresh the signatures each re-sign interval.
1. Jitter - the value added to the expiration time of signatures to ensure
   that not all signatures expire at the same time. The actual value of Jitter
   to be added MUST be -j + (r % 2j), where j is the jitter value from the
   policy and r a random duration, uniformly ranging between -j and j, is
   added to signature validity period to get the signature expiration time.
1. InceptionOffset - a duration that MUST be subtracted from the time at
   which a record is signed to give the start time of the record. This is
   required to allow for clock skew between the signing system and the 
   system on which the signature is checked. Without it, the possibility
   exists that the checking system could retrieve a signature whose start
   time is later than the current time.
1. Validity - groups two or more elements of information related to how long
   the signatures are valid for - Denial is the validity period for all NSEC
   and NSEC3 RRsets, Default is the validity period for all other RRset.

The relationship between these elements is shown [](#RFC6781), Figure 11.

#### Authenticated Denial of Existence

Authenticated denial of existence information is included within a Denial
container. It MUST contain either an empty leaf node NSEC or a container
NSEC3. A NSEC3 container MUST include a leaf node Resalt and MUST include
a container Hash. Additionally, it MAY include TTL and OptOut leaf nodes.

The Hash container MUST include three leaf nodes: Algorithm, Iterations and
SaltLength [MM: kasp.xml uses Salt, but it is actually only needed in
signconf.xml].

    container Denial {
        choice RRtype {
            case plain {
                leaf NSEC { type empty; }
            }
            case hashed {
                container NSEC3 {
                    leaf TTL { type duration; }
                    leaf OptOut { type empty; }
                    leaf Resalt { type duration; }
                    container Hash {
                        leaf Algorithm { type integer; }
                        leaf Iterations { type integer; }
                        leaf SaltLength { type integer; }
                    }
                }
            }
        }

If NSEC is used, zones with this policy MUST include NSEC records when signing
the zone. If NSEC3 is used, zones with this policy MUST include NSEC3 and
NSEC3PARAM records with the appropriate policy values:

1. TTL - if present, the TTL for the NSEC3PARAM resource record MUST be set to
   this value. If not present, PT0S (0) SHOULD be used as TTL.
1. OptOut - if present, all included NSEC3 records SHOULD set the Opt-Out bit.
   The signer SHOULD NOT include NSEC3 records for insecure delegations.
1. Resalt - A new salt value MUST be generated each Resalt interval value.
1. Algorithm, Iterations, SaltLength MUST be used as the parameters to the
   hash algorithm.

The choice and case modelling types are not included in the actual data tree.
In the case that NSEC is used, the XML example would be:

    <Denial>
        <NSEC/>
    </Denial>

#### Keys

Parameters relating to keys can be found in Keys container. This container
MUST include ...

    <TTL>PT3600S</TTL>
    <RetireSafety>PT3600S</RetireSafety>
    <PublishSafety>PT3600S</PublishSafety>
    <ShareKeys/>
    <Purge>P14D</Purge>

&lt;TTL&gt; is the time-to-live value for the DNSKEY resource records.
&lt;PublishSafety&gt; and &lt;RetireSafety&gt; are the publish and retire safety margins
for the keys. These intervals are safety margins added to calculated timing
values to give some extra time to cover unforeseen events, e.g. in case
external events prevent zone publication.

If multiple zones are associated with a policy, the presence of &lt;ShareKeys/&gt;
indicates that a key can be shared between zones.

If &lt;Purge&gt; is present, keys marked as dead will be automatically purged from
the database after this interval.

Key-Signing Keys

Parameters for key-signing keys are held in the &lt;KSK&gt; section:

    <KSK>
        <Algorithm length="2048">8</Algorithm>
        <Lifetime>P1Y</Lifetime>
        <Repository>softHSM</Repository>
        <Standby>1</Standby>
        <ManualRollover/>
    </KSK>

where:

1. &lt;Algorithm&gt; - determines the algorithm used for the key
1. &lt;Lifetime&gt; - determines how long the key is used for before it is rolled.
1. &lt;Repository&gt; - determines the location of the keys. Keys are stored in
   "repositories"
1. &lt;Standby&gt; - if present, determines the number of standby keys held in the
   zone.
1. &lt;ManualRollover/&gt; - if present, this indicates that the key rollover will
   only be initiated on the command by the operator.

Zone-Signing Keys

Parameters for zone-signing keys are held in the &lt;ZSK&gt; section, and have the
same meaning as for the KSK:

    <ZSK>
        <Algorithm length="1024">8</Algorithm>
        <Lifetime>P90D</Lifetime>
        <Repository>softHSM</Repository>
        <Standby>1</Standby>
    </ZSK>

[MM: Does enforcer 2.0 change this (CSK, Different rollover scenarios, ...)]

#### Zone

The Zone container encloses general information concerning the zone.
It SHOULD include a PropagationDelay leaf and a SOA container. The SOA
container MUST include a TTL leaf, Minimum leaf and Serial leaf.

    container Zone {
        leaf PropagationDelay { type duration; }
        container SOA {
            leaf TTL { type duration; }
            leaf Minimum { type duration; }
            leaf Serial { type string; }
        }
    }

The PropagationDelay leaf holds the amount of time needed for information
changes at the master server for the zone to work its way through to all the
secondary servers. The value MAY be used in equations related to key timings
during a rollover. If PropagationDelay is not used, a signer MUST use 
different heuristics to make sure key timings during a rollover are correct, 
for example by querying the name servers for the required records to exist.

The SOA container gives values of parameters for the SOA record in the
signed zone. These values will override values set for the SOA record in the
unsigned zone file:

1. TTL - The TTL of the SOA record MUST be set to the value of the TTL leaf.
1. Minimum - The MINIMUM rdata field of the SOA record MUST be set to the
   value of the Minimum leaf.
1. Serial - The format of the serial number in the signed zone. 
   This is one of: "counter", datecounter, unixtime, keep.

When Serial is set to "counter", the SOA serial MUST be incremented by one
every re-sign.

When Serial is set to "datecounter", the SOA serial MUST be
set to YYYYMMDDCC, where YYYYMMDD represents the current date and CC
the number of new re-signs that day. If there are more than 100 re-signs 
a day, the date MUST rollover to the day after and count is reset to 00.

When Serial is "unixtime", the SOA serial MUST be set to the seconds since
the epoch (1970-01-01 UTC). 

When Serial is "keep" the SOA serial MUST be set to the SERIAL rdata field
of the SOA record in the unsigned zone. If this does not increment the last
used serial, a signer MUST NOT produce a signed zone.

#### Parent

If a DNSSEC zone is in a chain of trust, digest information about the KSKs
used in the zone will be published in DS records in the parent zone.
To properly roll keys, timing information about the parent zone must be
configured in the Parent container. A Parent container SHOULD include 
a PropagationDelay leaf, a DS container and a SOA container.
The DS container MUST include a TTL leaf and the SOA container MUST include
TTL and Minimum leafs.

    container Parent {
        leaf PropagationDelay { type duration; }
        container DS {
            leaf TTL { type duration; }
        }
        container SOA {
            leaf TTL { type duration; }
            leaf Minimum { type duration; }
        }
    }

Here, the PropagationDelay leaf configures how long it takes to get a DS 
record published in the parent zone after submitting the DNSKEY or DS record
to the parent zone manager. The value MAY be used in equations related to key
timings during a rollover. If PropagationDelay is not used, a signer MUST use 
different heuristics to make sure key timings during a rollover are correct, 
for example by querying the name servers for the required records to exist.

The DS and SOA containers give values of parameters for the DS record and SOA
record in the parent zone. These values MAY be used in equations related to
key timings during a rollover. If these values are not used, a signer
MUST query the parent name servers in order to retrieve the correct values.

A before:

1. TTL - The TTL of the DS and SOA records MUST be set to the value of the
   corresponding TTL leaf.
1. Minimum - The MINIMUM rdata field of the SOA record MUST be set to the
   value of the Minimum leaf.



